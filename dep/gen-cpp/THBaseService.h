/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef THBaseService_H
#define THBaseService_H

#include <thrift/TDispatchProcessor.h>
#include "hbase_types.h"

namespace apache { namespace hadoop { namespace hbase { namespace thrift2 {

class THBaseServiceIf {
 public:
  virtual ~THBaseServiceIf() {}
  virtual bool exists(const std::string& table, const TGet& get) = 0;
  virtual void get(TResult& _return, const std::string& table, const TGet& get) = 0;
  virtual void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & gets) = 0;
  virtual void put(const std::string& table, const TPut& put) = 0;
  virtual bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& put) = 0;
  virtual void putMultiple(const std::string& table, const std::vector<TPut> & puts) = 0;
  virtual void deleteSingle(const std::string& table, const TDelete& deleteSingle) = 0;
  virtual void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & deletes) = 0;
  virtual bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& deleteSingle) = 0;
  virtual void increment(TResult& _return, const std::string& table, const TIncrement& increment) = 0;
  virtual int32_t openScanner(const std::string& table, const TScan& scan) = 0;
  virtual void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows) = 0;
  virtual void closeScanner(const int32_t scannerId) = 0;
  virtual void mutateRow(const std::string& table, const TRowMutations& rowMutations) = 0;
};

class THBaseServiceIfFactory {
 public:
  typedef THBaseServiceIf Handler;

  virtual ~THBaseServiceIfFactory() {}

  virtual THBaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(THBaseServiceIf* /* handler */) = 0;
};

class THBaseServiceIfSingletonFactory : virtual public THBaseServiceIfFactory {
 public:
  THBaseServiceIfSingletonFactory(const boost::shared_ptr<THBaseServiceIf>& iface) : iface_(iface) {}
  virtual ~THBaseServiceIfSingletonFactory() {}

  virtual THBaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(THBaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<THBaseServiceIf> iface_;
};

class THBaseServiceNull : virtual public THBaseServiceIf {
 public:
  virtual ~THBaseServiceNull() {}
  bool exists(const std::string& /* table */, const TGet& /* get */) {
    bool _return = false;
    return _return;
  }
  void get(TResult& /* _return */, const std::string& /* table */, const TGet& /* get */) {
    return;
  }
  void getMultiple(std::vector<TResult> & /* _return */, const std::string& /* table */, const std::vector<TGet> & /* gets */) {
    return;
  }
  void put(const std::string& /* table */, const TPut& /* put */) {
    return;
  }
  bool checkAndPut(const std::string& /* table */, const std::string& /* row */, const std::string& /* family */, const std::string& /* qualifier */, const std::string& /* value */, const TPut& /* put */) {
    bool _return = false;
    return _return;
  }
  void putMultiple(const std::string& /* table */, const std::vector<TPut> & /* puts */) {
    return;
  }
  void deleteSingle(const std::string& /* table */, const TDelete& /* deleteSingle */) {
    return;
  }
  void deleteMultiple(std::vector<TDelete> & /* _return */, const std::string& /* table */, const std::vector<TDelete> & /* deletes */) {
    return;
  }
  bool checkAndDelete(const std::string& /* table */, const std::string& /* row */, const std::string& /* family */, const std::string& /* qualifier */, const std::string& /* value */, const TDelete& /* deleteSingle */) {
    bool _return = false;
    return _return;
  }
  void increment(TResult& /* _return */, const std::string& /* table */, const TIncrement& /* increment */) {
    return;
  }
  int32_t openScanner(const std::string& /* table */, const TScan& /* scan */) {
    int32_t _return = 0;
    return _return;
  }
  void getScannerRows(std::vector<TResult> & /* _return */, const int32_t /* scannerId */, const int32_t /* numRows */) {
    return;
  }
  void closeScanner(const int32_t /* scannerId */) {
    return;
  }
  void mutateRow(const std::string& /* table */, const TRowMutations& /* rowMutations */) {
    return;
  }
};


class THBaseService_exists_args {
 public:

  THBaseService_exists_args() : table() {
  }

  virtual ~THBaseService_exists_args() throw() {}

  std::string table;
  TGet get;

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_get(const TGet& val) {
    get = val;
  }

  bool operator == (const THBaseService_exists_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(get == rhs.get))
      return false;
    return true;
  }
  bool operator != (const THBaseService_exists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_exists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_exists_pargs {
 public:


  virtual ~THBaseService_exists_pargs() throw() {}

  const std::string* table;
  const TGet* get;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_exists_result__isset {
  _THBaseService_exists_result__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_exists_result__isset;

class THBaseService_exists_result {
 public:

  THBaseService_exists_result() : success(0) {
  }

  virtual ~THBaseService_exists_result() throw() {}

  bool success;
  TIOError io;

  _THBaseService_exists_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_io(const TIOError& val) {
    io = val;
  }

  bool operator == (const THBaseService_exists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_exists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_exists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_exists_presult__isset {
  _THBaseService_exists_presult__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_exists_presult__isset;

class THBaseService_exists_presult {
 public:


  virtual ~THBaseService_exists_presult() throw() {}

  bool* success;
  TIOError io;

  _THBaseService_exists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_get_args {
 public:

  THBaseService_get_args() : table() {
  }

  virtual ~THBaseService_get_args() throw() {}

  std::string table;
  TGet get;

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_get(const TGet& val) {
    get = val;
  }

  bool operator == (const THBaseService_get_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(get == rhs.get))
      return false;
    return true;
  }
  bool operator != (const THBaseService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_get_pargs {
 public:


  virtual ~THBaseService_get_pargs() throw() {}

  const std::string* table;
  const TGet* get;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_get_result__isset {
  _THBaseService_get_result__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_get_result__isset;

class THBaseService_get_result {
 public:

  THBaseService_get_result() {
  }

  virtual ~THBaseService_get_result() throw() {}

  TResult success;
  TIOError io;

  _THBaseService_get_result__isset __isset;

  void __set_success(const TResult& val) {
    success = val;
  }

  void __set_io(const TIOError& val) {
    io = val;
  }

  bool operator == (const THBaseService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_get_presult__isset {
  _THBaseService_get_presult__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_get_presult__isset;

class THBaseService_get_presult {
 public:


  virtual ~THBaseService_get_presult() throw() {}

  TResult* success;
  TIOError io;

  _THBaseService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_getMultiple_args {
 public:

  THBaseService_getMultiple_args() : table() {
  }

  virtual ~THBaseService_getMultiple_args() throw() {}

  std::string table;
  std::vector<TGet>  gets;

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_gets(const std::vector<TGet> & val) {
    gets = val;
  }

  bool operator == (const THBaseService_getMultiple_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(gets == rhs.gets))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_getMultiple_pargs {
 public:


  virtual ~THBaseService_getMultiple_pargs() throw() {}

  const std::string* table;
  const std::vector<TGet> * gets;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getMultiple_result__isset {
  _THBaseService_getMultiple_result__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_getMultiple_result__isset;

class THBaseService_getMultiple_result {
 public:

  THBaseService_getMultiple_result() {
  }

  virtual ~THBaseService_getMultiple_result() throw() {}

  std::vector<TResult>  success;
  TIOError io;

  _THBaseService_getMultiple_result__isset __isset;

  void __set_success(const std::vector<TResult> & val) {
    success = val;
  }

  void __set_io(const TIOError& val) {
    io = val;
  }

  bool operator == (const THBaseService_getMultiple_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getMultiple_presult__isset {
  _THBaseService_getMultiple_presult__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_getMultiple_presult__isset;

class THBaseService_getMultiple_presult {
 public:


  virtual ~THBaseService_getMultiple_presult() throw() {}

  std::vector<TResult> * success;
  TIOError io;

  _THBaseService_getMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_put_args {
 public:

  THBaseService_put_args() : table() {
  }

  virtual ~THBaseService_put_args() throw() {}

  std::string table;
  TPut put;

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_put(const TPut& val) {
    put = val;
  }

  bool operator == (const THBaseService_put_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(put == rhs.put))
      return false;
    return true;
  }
  bool operator != (const THBaseService_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_put_pargs {
 public:


  virtual ~THBaseService_put_pargs() throw() {}

  const std::string* table;
  const TPut* put;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_put_result__isset {
  _THBaseService_put_result__isset() : io(false) {}
  bool io;
} _THBaseService_put_result__isset;

class THBaseService_put_result {
 public:

  THBaseService_put_result() {
  }

  virtual ~THBaseService_put_result() throw() {}

  TIOError io;

  _THBaseService_put_result__isset __isset;

  void __set_io(const TIOError& val) {
    io = val;
  }

  bool operator == (const THBaseService_put_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_put_presult__isset {
  _THBaseService_put_presult__isset() : io(false) {}
  bool io;
} _THBaseService_put_presult__isset;

class THBaseService_put_presult {
 public:


  virtual ~THBaseService_put_presult() throw() {}

  TIOError io;

  _THBaseService_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _THBaseService_checkAndPut_args__isset {
  _THBaseService_checkAndPut_args__isset() : value(false) {}
  bool value;
} _THBaseService_checkAndPut_args__isset;

class THBaseService_checkAndPut_args {
 public:

  THBaseService_checkAndPut_args() : table(), row(), family(), qualifier(), value() {
  }

  virtual ~THBaseService_checkAndPut_args() throw() {}

  std::string table;
  std::string row;
  std::string family;
  std::string qualifier;
  std::string value;
  TPut put;

  _THBaseService_checkAndPut_args__isset __isset;

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_row(const std::string& val) {
    row = val;
  }

  void __set_family(const std::string& val) {
    family = val;
  }

  void __set_qualifier(const std::string& val) {
    qualifier = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_put(const TPut& val) {
    put = val;
  }

  bool operator == (const THBaseService_checkAndPut_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(row == rhs.row))
      return false;
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(put == rhs.put))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndPut_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndPut_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_checkAndPut_pargs {
 public:


  virtual ~THBaseService_checkAndPut_pargs() throw() {}

  const std::string* table;
  const std::string* row;
  const std::string* family;
  const std::string* qualifier;
  const std::string* value;
  const TPut* put;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_checkAndPut_result__isset {
  _THBaseService_checkAndPut_result__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_checkAndPut_result__isset;

class THBaseService_checkAndPut_result {
 public:

  THBaseService_checkAndPut_result() : success(0) {
  }

  virtual ~THBaseService_checkAndPut_result() throw() {}

  bool success;
  TIOError io;

  _THBaseService_checkAndPut_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_io(const TIOError& val) {
    io = val;
  }

  bool operator == (const THBaseService_checkAndPut_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndPut_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndPut_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_checkAndPut_presult__isset {
  _THBaseService_checkAndPut_presult__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_checkAndPut_presult__isset;

class THBaseService_checkAndPut_presult {
 public:


  virtual ~THBaseService_checkAndPut_presult() throw() {}

  bool* success;
  TIOError io;

  _THBaseService_checkAndPut_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_putMultiple_args {
 public:

  THBaseService_putMultiple_args() : table() {
  }

  virtual ~THBaseService_putMultiple_args() throw() {}

  std::string table;
  std::vector<TPut>  puts;

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_puts(const std::vector<TPut> & val) {
    puts = val;
  }

  bool operator == (const THBaseService_putMultiple_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(puts == rhs.puts))
      return false;
    return true;
  }
  bool operator != (const THBaseService_putMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_putMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_putMultiple_pargs {
 public:


  virtual ~THBaseService_putMultiple_pargs() throw() {}

  const std::string* table;
  const std::vector<TPut> * puts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_putMultiple_result__isset {
  _THBaseService_putMultiple_result__isset() : io(false) {}
  bool io;
} _THBaseService_putMultiple_result__isset;

class THBaseService_putMultiple_result {
 public:

  THBaseService_putMultiple_result() {
  }

  virtual ~THBaseService_putMultiple_result() throw() {}

  TIOError io;

  _THBaseService_putMultiple_result__isset __isset;

  void __set_io(const TIOError& val) {
    io = val;
  }

  bool operator == (const THBaseService_putMultiple_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_putMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_putMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_putMultiple_presult__isset {
  _THBaseService_putMultiple_presult__isset() : io(false) {}
  bool io;
} _THBaseService_putMultiple_presult__isset;

class THBaseService_putMultiple_presult {
 public:


  virtual ~THBaseService_putMultiple_presult() throw() {}

  TIOError io;

  _THBaseService_putMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_deleteSingle_args {
 public:

  THBaseService_deleteSingle_args() : table() {
  }

  virtual ~THBaseService_deleteSingle_args() throw() {}

  std::string table;
  TDelete deleteSingle;

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_deleteSingle(const TDelete& val) {
    deleteSingle = val;
  }

  bool operator == (const THBaseService_deleteSingle_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(deleteSingle == rhs.deleteSingle))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteSingle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteSingle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_deleteSingle_pargs {
 public:


  virtual ~THBaseService_deleteSingle_pargs() throw() {}

  const std::string* table;
  const TDelete* deleteSingle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_deleteSingle_result__isset {
  _THBaseService_deleteSingle_result__isset() : io(false) {}
  bool io;
} _THBaseService_deleteSingle_result__isset;

class THBaseService_deleteSingle_result {
 public:

  THBaseService_deleteSingle_result() {
  }

  virtual ~THBaseService_deleteSingle_result() throw() {}

  TIOError io;

  _THBaseService_deleteSingle_result__isset __isset;

  void __set_io(const TIOError& val) {
    io = val;
  }

  bool operator == (const THBaseService_deleteSingle_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteSingle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteSingle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_deleteSingle_presult__isset {
  _THBaseService_deleteSingle_presult__isset() : io(false) {}
  bool io;
} _THBaseService_deleteSingle_presult__isset;

class THBaseService_deleteSingle_presult {
 public:


  virtual ~THBaseService_deleteSingle_presult() throw() {}

  TIOError io;

  _THBaseService_deleteSingle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_deleteMultiple_args {
 public:

  THBaseService_deleteMultiple_args() : table() {
  }

  virtual ~THBaseService_deleteMultiple_args() throw() {}

  std::string table;
  std::vector<TDelete>  deletes;

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_deletes(const std::vector<TDelete> & val) {
    deletes = val;
  }

  bool operator == (const THBaseService_deleteMultiple_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(deletes == rhs.deletes))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_deleteMultiple_pargs {
 public:


  virtual ~THBaseService_deleteMultiple_pargs() throw() {}

  const std::string* table;
  const std::vector<TDelete> * deletes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_deleteMultiple_result__isset {
  _THBaseService_deleteMultiple_result__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_deleteMultiple_result__isset;

class THBaseService_deleteMultiple_result {
 public:

  THBaseService_deleteMultiple_result() {
  }

  virtual ~THBaseService_deleteMultiple_result() throw() {}

  std::vector<TDelete>  success;
  TIOError io;

  _THBaseService_deleteMultiple_result__isset __isset;

  void __set_success(const std::vector<TDelete> & val) {
    success = val;
  }

  void __set_io(const TIOError& val) {
    io = val;
  }

  bool operator == (const THBaseService_deleteMultiple_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_deleteMultiple_presult__isset {
  _THBaseService_deleteMultiple_presult__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_deleteMultiple_presult__isset;

class THBaseService_deleteMultiple_presult {
 public:


  virtual ~THBaseService_deleteMultiple_presult() throw() {}

  std::vector<TDelete> * success;
  TIOError io;

  _THBaseService_deleteMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _THBaseService_checkAndDelete_args__isset {
  _THBaseService_checkAndDelete_args__isset() : value(false) {}
  bool value;
} _THBaseService_checkAndDelete_args__isset;

class THBaseService_checkAndDelete_args {
 public:

  THBaseService_checkAndDelete_args() : table(), row(), family(), qualifier(), value() {
  }

  virtual ~THBaseService_checkAndDelete_args() throw() {}

  std::string table;
  std::string row;
  std::string family;
  std::string qualifier;
  std::string value;
  TDelete deleteSingle;

  _THBaseService_checkAndDelete_args__isset __isset;

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_row(const std::string& val) {
    row = val;
  }

  void __set_family(const std::string& val) {
    family = val;
  }

  void __set_qualifier(const std::string& val) {
    qualifier = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_deleteSingle(const TDelete& val) {
    deleteSingle = val;
  }

  bool operator == (const THBaseService_checkAndDelete_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(row == rhs.row))
      return false;
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(deleteSingle == rhs.deleteSingle))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndDelete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndDelete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_checkAndDelete_pargs {
 public:


  virtual ~THBaseService_checkAndDelete_pargs() throw() {}

  const std::string* table;
  const std::string* row;
  const std::string* family;
  const std::string* qualifier;
  const std::string* value;
  const TDelete* deleteSingle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_checkAndDelete_result__isset {
  _THBaseService_checkAndDelete_result__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_checkAndDelete_result__isset;

class THBaseService_checkAndDelete_result {
 public:

  THBaseService_checkAndDelete_result() : success(0) {
  }

  virtual ~THBaseService_checkAndDelete_result() throw() {}

  bool success;
  TIOError io;

  _THBaseService_checkAndDelete_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_io(const TIOError& val) {
    io = val;
  }

  bool operator == (const THBaseService_checkAndDelete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndDelete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndDelete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_checkAndDelete_presult__isset {
  _THBaseService_checkAndDelete_presult__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_checkAndDelete_presult__isset;

class THBaseService_checkAndDelete_presult {
 public:


  virtual ~THBaseService_checkAndDelete_presult() throw() {}

  bool* success;
  TIOError io;

  _THBaseService_checkAndDelete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_increment_args {
 public:

  THBaseService_increment_args() : table() {
  }

  virtual ~THBaseService_increment_args() throw() {}

  std::string table;
  TIncrement increment;

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_increment(const TIncrement& val) {
    increment = val;
  }

  bool operator == (const THBaseService_increment_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(increment == rhs.increment))
      return false;
    return true;
  }
  bool operator != (const THBaseService_increment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_increment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_increment_pargs {
 public:


  virtual ~THBaseService_increment_pargs() throw() {}

  const std::string* table;
  const TIncrement* increment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_increment_result__isset {
  _THBaseService_increment_result__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_increment_result__isset;

class THBaseService_increment_result {
 public:

  THBaseService_increment_result() {
  }

  virtual ~THBaseService_increment_result() throw() {}

  TResult success;
  TIOError io;

  _THBaseService_increment_result__isset __isset;

  void __set_success(const TResult& val) {
    success = val;
  }

  void __set_io(const TIOError& val) {
    io = val;
  }

  bool operator == (const THBaseService_increment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_increment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_increment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_increment_presult__isset {
  _THBaseService_increment_presult__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_increment_presult__isset;

class THBaseService_increment_presult {
 public:


  virtual ~THBaseService_increment_presult() throw() {}

  TResult* success;
  TIOError io;

  _THBaseService_increment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_openScanner_args {
 public:

  THBaseService_openScanner_args() : table() {
  }

  virtual ~THBaseService_openScanner_args() throw() {}

  std::string table;
  TScan scan;

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_scan(const TScan& val) {
    scan = val;
  }

  bool operator == (const THBaseService_openScanner_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(scan == rhs.scan))
      return false;
    return true;
  }
  bool operator != (const THBaseService_openScanner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_openScanner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_openScanner_pargs {
 public:


  virtual ~THBaseService_openScanner_pargs() throw() {}

  const std::string* table;
  const TScan* scan;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_openScanner_result__isset {
  _THBaseService_openScanner_result__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_openScanner_result__isset;

class THBaseService_openScanner_result {
 public:

  THBaseService_openScanner_result() : success(0) {
  }

  virtual ~THBaseService_openScanner_result() throw() {}

  int32_t success;
  TIOError io;

  _THBaseService_openScanner_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_io(const TIOError& val) {
    io = val;
  }

  bool operator == (const THBaseService_openScanner_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_openScanner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_openScanner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_openScanner_presult__isset {
  _THBaseService_openScanner_presult__isset() : success(false), io(false) {}
  bool success;
  bool io;
} _THBaseService_openScanner_presult__isset;

class THBaseService_openScanner_presult {
 public:


  virtual ~THBaseService_openScanner_presult() throw() {}

  int32_t* success;
  TIOError io;

  _THBaseService_openScanner_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _THBaseService_getScannerRows_args__isset {
  _THBaseService_getScannerRows_args__isset() : numRows(true) {}
  bool numRows;
} _THBaseService_getScannerRows_args__isset;

class THBaseService_getScannerRows_args {
 public:

  THBaseService_getScannerRows_args() : scannerId(0), numRows(1) {
  }

  virtual ~THBaseService_getScannerRows_args() throw() {}

  int32_t scannerId;
  int32_t numRows;

  _THBaseService_getScannerRows_args__isset __isset;

  void __set_scannerId(const int32_t val) {
    scannerId = val;
  }

  void __set_numRows(const int32_t val) {
    numRows = val;
  }

  bool operator == (const THBaseService_getScannerRows_args & rhs) const
  {
    if (!(scannerId == rhs.scannerId))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerRows_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerRows_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_getScannerRows_pargs {
 public:


  virtual ~THBaseService_getScannerRows_pargs() throw() {}

  const int32_t* scannerId;
  const int32_t* numRows;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getScannerRows_result__isset {
  _THBaseService_getScannerRows_result__isset() : success(false), io(false), ia(false) {}
  bool success;
  bool io;
  bool ia;
} _THBaseService_getScannerRows_result__isset;

class THBaseService_getScannerRows_result {
 public:

  THBaseService_getScannerRows_result() {
  }

  virtual ~THBaseService_getScannerRows_result() throw() {}

  std::vector<TResult>  success;
  TIOError io;
  TIllegalArgument ia;

  _THBaseService_getScannerRows_result__isset __isset;

  void __set_success(const std::vector<TResult> & val) {
    success = val;
  }

  void __set_io(const TIOError& val) {
    io = val;
  }

  void __set_ia(const TIllegalArgument& val) {
    ia = val;
  }

  bool operator == (const THBaseService_getScannerRows_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerRows_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerRows_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getScannerRows_presult__isset {
  _THBaseService_getScannerRows_presult__isset() : success(false), io(false), ia(false) {}
  bool success;
  bool io;
  bool ia;
} _THBaseService_getScannerRows_presult__isset;

class THBaseService_getScannerRows_presult {
 public:


  virtual ~THBaseService_getScannerRows_presult() throw() {}

  std::vector<TResult> * success;
  TIOError io;
  TIllegalArgument ia;

  _THBaseService_getScannerRows_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_closeScanner_args {
 public:

  THBaseService_closeScanner_args() : scannerId(0) {
  }

  virtual ~THBaseService_closeScanner_args() throw() {}

  int32_t scannerId;

  void __set_scannerId(const int32_t val) {
    scannerId = val;
  }

  bool operator == (const THBaseService_closeScanner_args & rhs) const
  {
    if (!(scannerId == rhs.scannerId))
      return false;
    return true;
  }
  bool operator != (const THBaseService_closeScanner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_closeScanner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_closeScanner_pargs {
 public:


  virtual ~THBaseService_closeScanner_pargs() throw() {}

  const int32_t* scannerId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_closeScanner_result__isset {
  _THBaseService_closeScanner_result__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _THBaseService_closeScanner_result__isset;

class THBaseService_closeScanner_result {
 public:

  THBaseService_closeScanner_result() {
  }

  virtual ~THBaseService_closeScanner_result() throw() {}

  TIOError io;
  TIllegalArgument ia;

  _THBaseService_closeScanner_result__isset __isset;

  void __set_io(const TIOError& val) {
    io = val;
  }

  void __set_ia(const TIllegalArgument& val) {
    ia = val;
  }

  bool operator == (const THBaseService_closeScanner_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const THBaseService_closeScanner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_closeScanner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_closeScanner_presult__isset {
  _THBaseService_closeScanner_presult__isset() : io(false), ia(false) {}
  bool io;
  bool ia;
} _THBaseService_closeScanner_presult__isset;

class THBaseService_closeScanner_presult {
 public:


  virtual ~THBaseService_closeScanner_presult() throw() {}

  TIOError io;
  TIllegalArgument ia;

  _THBaseService_closeScanner_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_mutateRow_args {
 public:

  THBaseService_mutateRow_args() : table() {
  }

  virtual ~THBaseService_mutateRow_args() throw() {}

  std::string table;
  TRowMutations rowMutations;

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_rowMutations(const TRowMutations& val) {
    rowMutations = val;
  }

  bool operator == (const THBaseService_mutateRow_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(rowMutations == rhs.rowMutations))
      return false;
    return true;
  }
  bool operator != (const THBaseService_mutateRow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_mutateRow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_mutateRow_pargs {
 public:


  virtual ~THBaseService_mutateRow_pargs() throw() {}

  const std::string* table;
  const TRowMutations* rowMutations;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_mutateRow_result__isset {
  _THBaseService_mutateRow_result__isset() : io(false) {}
  bool io;
} _THBaseService_mutateRow_result__isset;

class THBaseService_mutateRow_result {
 public:

  THBaseService_mutateRow_result() {
  }

  virtual ~THBaseService_mutateRow_result() throw() {}

  TIOError io;

  _THBaseService_mutateRow_result__isset __isset;

  void __set_io(const TIOError& val) {
    io = val;
  }

  bool operator == (const THBaseService_mutateRow_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_mutateRow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_mutateRow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_mutateRow_presult__isset {
  _THBaseService_mutateRow_presult__isset() : io(false) {}
  bool io;
} _THBaseService_mutateRow_presult__isset;

class THBaseService_mutateRow_presult {
 public:


  virtual ~THBaseService_mutateRow_presult() throw() {}

  TIOError io;

  _THBaseService_mutateRow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class THBaseServiceClient : virtual public THBaseServiceIf {
 public:
  THBaseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  THBaseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool exists(const std::string& table, const TGet& get);
  void send_exists(const std::string& table, const TGet& get);
  bool recv_exists();
  void get(TResult& _return, const std::string& table, const TGet& get);
  void send_get(const std::string& table, const TGet& get);
  void recv_get(TResult& _return);
  void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & gets);
  void send_getMultiple(const std::string& table, const std::vector<TGet> & gets);
  void recv_getMultiple(std::vector<TResult> & _return);
  void put(const std::string& table, const TPut& put);
  void send_put(const std::string& table, const TPut& put);
  void recv_put();
  bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& put);
  void send_checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& put);
  bool recv_checkAndPut();
  void putMultiple(const std::string& table, const std::vector<TPut> & puts);
  void send_putMultiple(const std::string& table, const std::vector<TPut> & puts);
  void recv_putMultiple();
  void deleteSingle(const std::string& table, const TDelete& deleteSingle);
  void send_deleteSingle(const std::string& table, const TDelete& deleteSingle);
  void recv_deleteSingle();
  void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & deletes);
  void send_deleteMultiple(const std::string& table, const std::vector<TDelete> & deletes);
  void recv_deleteMultiple(std::vector<TDelete> & _return);
  bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& deleteSingle);
  void send_checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& deleteSingle);
  bool recv_checkAndDelete();
  void increment(TResult& _return, const std::string& table, const TIncrement& increment);
  void send_increment(const std::string& table, const TIncrement& increment);
  void recv_increment(TResult& _return);
  int32_t openScanner(const std::string& table, const TScan& scan);
  void send_openScanner(const std::string& table, const TScan& scan);
  int32_t recv_openScanner();
  void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows);
  void send_getScannerRows(const int32_t scannerId, const int32_t numRows);
  void recv_getScannerRows(std::vector<TResult> & _return);
  void closeScanner(const int32_t scannerId);
  void send_closeScanner(const int32_t scannerId);
  void recv_closeScanner();
  void mutateRow(const std::string& table, const TRowMutations& rowMutations);
  void send_mutateRow(const std::string& table, const TRowMutations& rowMutations);
  void recv_mutateRow();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class THBaseServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<THBaseServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (THBaseServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_exists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkAndPut(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteSingle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkAndDelete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_increment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openScanner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getScannerRows(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeScanner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mutateRow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  THBaseServiceProcessor(boost::shared_ptr<THBaseServiceIf> iface) :
    iface_(iface) {
    processMap_["exists"] = &THBaseServiceProcessor::process_exists;
    processMap_["get"] = &THBaseServiceProcessor::process_get;
    processMap_["getMultiple"] = &THBaseServiceProcessor::process_getMultiple;
    processMap_["put"] = &THBaseServiceProcessor::process_put;
    processMap_["checkAndPut"] = &THBaseServiceProcessor::process_checkAndPut;
    processMap_["putMultiple"] = &THBaseServiceProcessor::process_putMultiple;
    processMap_["deleteSingle"] = &THBaseServiceProcessor::process_deleteSingle;
    processMap_["deleteMultiple"] = &THBaseServiceProcessor::process_deleteMultiple;
    processMap_["checkAndDelete"] = &THBaseServiceProcessor::process_checkAndDelete;
    processMap_["increment"] = &THBaseServiceProcessor::process_increment;
    processMap_["openScanner"] = &THBaseServiceProcessor::process_openScanner;
    processMap_["getScannerRows"] = &THBaseServiceProcessor::process_getScannerRows;
    processMap_["closeScanner"] = &THBaseServiceProcessor::process_closeScanner;
    processMap_["mutateRow"] = &THBaseServiceProcessor::process_mutateRow;
  }

  virtual ~THBaseServiceProcessor() {}
};

class THBaseServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  THBaseServiceProcessorFactory(const ::boost::shared_ptr< THBaseServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< THBaseServiceIfFactory > handlerFactory_;
};

class THBaseServiceMultiface : virtual public THBaseServiceIf {
 public:
  THBaseServiceMultiface(std::vector<boost::shared_ptr<THBaseServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~THBaseServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<THBaseServiceIf> > ifaces_;
  THBaseServiceMultiface() {}
  void add(boost::shared_ptr<THBaseServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool exists(const std::string& table, const TGet& get) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exists(table, get);
    }
    return ifaces_[i]->exists(table, get);
  }

  void get(TResult& _return, const std::string& table, const TGet& get) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, table, get);
    }
    ifaces_[i]->get(_return, table, get);
    return;
  }

  void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & gets) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMultiple(_return, table, gets);
    }
    ifaces_[i]->getMultiple(_return, table, gets);
    return;
  }

  void put(const std::string& table, const TPut& put) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(table, put);
    }
    ifaces_[i]->put(table, put);
  }

  bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& put) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkAndPut(table, row, family, qualifier, value, put);
    }
    return ifaces_[i]->checkAndPut(table, row, family, qualifier, value, put);
  }

  void putMultiple(const std::string& table, const std::vector<TPut> & puts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putMultiple(table, puts);
    }
    ifaces_[i]->putMultiple(table, puts);
  }

  void deleteSingle(const std::string& table, const TDelete& deleteSingle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteSingle(table, deleteSingle);
    }
    ifaces_[i]->deleteSingle(table, deleteSingle);
  }

  void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & deletes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteMultiple(_return, table, deletes);
    }
    ifaces_[i]->deleteMultiple(_return, table, deletes);
    return;
  }

  bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& deleteSingle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkAndDelete(table, row, family, qualifier, value, deleteSingle);
    }
    return ifaces_[i]->checkAndDelete(table, row, family, qualifier, value, deleteSingle);
  }

  void increment(TResult& _return, const std::string& table, const TIncrement& increment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->increment(_return, table, increment);
    }
    ifaces_[i]->increment(_return, table, increment);
    return;
  }

  int32_t openScanner(const std::string& table, const TScan& scan) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openScanner(table, scan);
    }
    return ifaces_[i]->openScanner(table, scan);
  }

  void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getScannerRows(_return, scannerId, numRows);
    }
    ifaces_[i]->getScannerRows(_return, scannerId, numRows);
    return;
  }

  void closeScanner(const int32_t scannerId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeScanner(scannerId);
    }
    ifaces_[i]->closeScanner(scannerId);
  }

  void mutateRow(const std::string& table, const TRowMutations& rowMutations) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mutateRow(table, rowMutations);
    }
    ifaces_[i]->mutateRow(table, rowMutations);
  }

};

}}}} // namespace

#endif
