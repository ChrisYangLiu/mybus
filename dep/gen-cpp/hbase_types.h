/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef hbase_TYPES_H
#define hbase_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace apache { namespace hadoop { namespace hbase { namespace thrift2 {

struct TDeleteType {
  enum type {
    DELETE_COLUMN = 0,
    DELETE_COLUMNS = 1
  };
};

extern const std::map<int, const char*> _TDeleteType_VALUES_TO_NAMES;


class TTimeRange {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  TTimeRange() : minStamp(0), maxStamp(0) {
  }

  virtual ~TTimeRange() throw() {}

  int64_t minStamp;
  int64_t maxStamp;

  void __set_minStamp(const int64_t val) {
    minStamp = val;
  }

  void __set_maxStamp(const int64_t val) {
    maxStamp = val;
  }

  bool operator == (const TTimeRange & rhs) const
  {
    if (!(minStamp == rhs.minStamp))
      return false;
    if (!(maxStamp == rhs.maxStamp))
      return false;
    return true;
  }
  bool operator != (const TTimeRange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTimeRange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TTimeRange &a, TTimeRange &b);

typedef struct _TColumn__isset {
  _TColumn__isset() : qualifier(false), timestamp(false) {}
  bool qualifier;
  bool timestamp;
} _TColumn__isset;

class TColumn {
 public:

  static const char* ascii_fingerprint; // = "354B89A42CE318BBBCE588A386D5D6CD";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0x4B,0x89,0xA4,0x2C,0xE3,0x18,0xBB,0xBC,0xE5,0x88,0xA3,0x86,0xD5,0xD6,0xCD};

  TColumn() : family(), qualifier(), timestamp(0) {
  }

  virtual ~TColumn() throw() {}

  std::string family;
  std::string qualifier;
  int64_t timestamp;

  _TColumn__isset __isset;

  void __set_family(const std::string& val) {
    family = val;
  }

  void __set_qualifier(const std::string& val) {
    qualifier = val;
    __isset.qualifier = true;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
    __isset.timestamp = true;
  }

  bool operator == (const TColumn & rhs) const
  {
    if (!(family == rhs.family))
      return false;
    if (__isset.qualifier != rhs.__isset.qualifier)
      return false;
    else if (__isset.qualifier && !(qualifier == rhs.qualifier))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const TColumn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TColumn &a, TColumn &b);

typedef struct _TColumnValue__isset {
  _TColumnValue__isset() : timestamp(false) {}
  bool timestamp;
} _TColumnValue__isset;

class TColumnValue {
 public:

  static const char* ascii_fingerprint; // = "1B53D3FAC5A5CFD45E7E867DA6314FAB";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0x53,0xD3,0xFA,0xC5,0xA5,0xCF,0xD4,0x5E,0x7E,0x86,0x7D,0xA6,0x31,0x4F,0xAB};

  TColumnValue() : family(), qualifier(), value(), timestamp(0) {
  }

  virtual ~TColumnValue() throw() {}

  std::string family;
  std::string qualifier;
  std::string value;
  int64_t timestamp;

  _TColumnValue__isset __isset;

  void __set_family(const std::string& val) {
    family = val;
  }

  void __set_qualifier(const std::string& val) {
    qualifier = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
    __isset.timestamp = true;
  }

  bool operator == (const TColumnValue & rhs) const
  {
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (!(value == rhs.value))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const TColumnValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumnValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TColumnValue &a, TColumnValue &b);

typedef struct _TColumnIncrement__isset {
  _TColumnIncrement__isset() : amount(true) {}
  bool amount;
} _TColumnIncrement__isset;

class TColumnIncrement {
 public:

  static const char* ascii_fingerprint; // = "C55F1CDA80E5E1836AFA7E590331D0A5";
  static const uint8_t binary_fingerprint[16]; // = {0xC5,0x5F,0x1C,0xDA,0x80,0xE5,0xE1,0x83,0x6A,0xFA,0x7E,0x59,0x03,0x31,0xD0,0xA5};

  TColumnIncrement() : family(), qualifier(), amount(1LL) {
  }

  virtual ~TColumnIncrement() throw() {}

  std::string family;
  std::string qualifier;
  int64_t amount;

  _TColumnIncrement__isset __isset;

  void __set_family(const std::string& val) {
    family = val;
  }

  void __set_qualifier(const std::string& val) {
    qualifier = val;
  }

  void __set_amount(const int64_t val) {
    amount = val;
    __isset.amount = true;
  }

  bool operator == (const TColumnIncrement & rhs) const
  {
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (__isset.amount != rhs.__isset.amount)
      return false;
    else if (__isset.amount && !(amount == rhs.amount))
      return false;
    return true;
  }
  bool operator != (const TColumnIncrement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumnIncrement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TColumnIncrement &a, TColumnIncrement &b);

typedef struct _TResult__isset {
  _TResult__isset() : row(false) {}
  bool row;
} _TResult__isset;

class TResult {
 public:

  static const char* ascii_fingerprint; // = "FBE20C68200F7AC71F9527445D887F19";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0xE2,0x0C,0x68,0x20,0x0F,0x7A,0xC7,0x1F,0x95,0x27,0x44,0x5D,0x88,0x7F,0x19};

  TResult() : row() {
  }

  virtual ~TResult() throw() {}

  std::string row;
  std::vector<TColumnValue>  columnValues;

  _TResult__isset __isset;

  void __set_row(const std::string& val) {
    row = val;
    __isset.row = true;
  }

  void __set_columnValues(const std::vector<TColumnValue> & val) {
    columnValues = val;
  }

  bool operator == (const TResult & rhs) const
  {
    if (__isset.row != rhs.__isset.row)
      return false;
    else if (__isset.row && !(row == rhs.row))
      return false;
    if (!(columnValues == rhs.columnValues))
      return false;
    return true;
  }
  bool operator != (const TResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResult &a, TResult &b);

typedef struct _TGet__isset {
  _TGet__isset() : columns(false), timestamp(false), timeRange(false), maxVersions(false), filterString(false), attributes(false) {}
  bool columns;
  bool timestamp;
  bool timeRange;
  bool maxVersions;
  bool filterString;
  bool attributes;
} _TGet__isset;

class TGet {
 public:

  static const char* ascii_fingerprint; // = "9967209EC61F62E1A2DB77EAC9ED2D6D";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x67,0x20,0x9E,0xC6,0x1F,0x62,0xE1,0xA2,0xDB,0x77,0xEA,0xC9,0xED,0x2D,0x6D};

  TGet() : row(), timestamp(0), maxVersions(0), filterString() {
  }

  virtual ~TGet() throw() {}

  std::string row;
  std::vector<TColumn>  columns;
  int64_t timestamp;
  TTimeRange timeRange;
  int32_t maxVersions;
  std::string filterString;
  std::map<std::string, std::string>  attributes;

  _TGet__isset __isset;

  void __set_row(const std::string& val) {
    row = val;
  }

  void __set_columns(const std::vector<TColumn> & val) {
    columns = val;
    __isset.columns = true;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
    __isset.timestamp = true;
  }

  void __set_timeRange(const TTimeRange& val) {
    timeRange = val;
    __isset.timeRange = true;
  }

  void __set_maxVersions(const int32_t val) {
    maxVersions = val;
    __isset.maxVersions = true;
  }

  void __set_filterString(const std::string& val) {
    filterString = val;
    __isset.filterString = true;
  }

  void __set_attributes(const std::map<std::string, std::string> & val) {
    attributes = val;
    __isset.attributes = true;
  }

  bool operator == (const TGet & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (__isset.columns != rhs.__isset.columns)
      return false;
    else if (__isset.columns && !(columns == rhs.columns))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.timeRange != rhs.__isset.timeRange)
      return false;
    else if (__isset.timeRange && !(timeRange == rhs.timeRange))
      return false;
    if (__isset.maxVersions != rhs.__isset.maxVersions)
      return false;
    else if (__isset.maxVersions && !(maxVersions == rhs.maxVersions))
      return false;
    if (__isset.filterString != rhs.__isset.filterString)
      return false;
    else if (__isset.filterString && !(filterString == rhs.filterString))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    return true;
  }
  bool operator != (const TGet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TGet &a, TGet &b);

typedef struct _TPut__isset {
  _TPut__isset() : timestamp(false), writeToWal(true), attributes(false) {}
  bool timestamp;
  bool writeToWal;
  bool attributes;
} _TPut__isset;

class TPut {
 public:

  static const char* ascii_fingerprint; // = "A055A72DCE4D0FAEBB884E5E6730D964";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0x55,0xA7,0x2D,0xCE,0x4D,0x0F,0xAE,0xBB,0x88,0x4E,0x5E,0x67,0x30,0xD9,0x64};

  TPut() : row(), timestamp(0), writeToWal(true) {
  }

  virtual ~TPut() throw() {}

  std::string row;
  std::vector<TColumnValue>  columnValues;
  int64_t timestamp;
  bool writeToWal;
  std::map<std::string, std::string>  attributes;

  _TPut__isset __isset;

  void __set_row(const std::string& val) {
    row = val;
  }

  void __set_columnValues(const std::vector<TColumnValue> & val) {
    columnValues = val;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
    __isset.timestamp = true;
  }

  void __set_writeToWal(const bool val) {
    writeToWal = val;
    __isset.writeToWal = true;
  }

  void __set_attributes(const std::map<std::string, std::string> & val) {
    attributes = val;
    __isset.attributes = true;
  }

  bool operator == (const TPut & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(columnValues == rhs.columnValues))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.writeToWal != rhs.__isset.writeToWal)
      return false;
    else if (__isset.writeToWal && !(writeToWal == rhs.writeToWal))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    return true;
  }
  bool operator != (const TPut &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPut & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPut &a, TPut &b);

typedef struct _TDelete__isset {
  _TDelete__isset() : columns(false), timestamp(false), deleteType(true), writeToWal(true), attributes(false) {}
  bool columns;
  bool timestamp;
  bool deleteType;
  bool writeToWal;
  bool attributes;
} _TDelete__isset;

class TDelete {
 public:

  static const char* ascii_fingerprint; // = "B23CAB9FE9B4EAB3ACAA808A3B9FBAD8";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0x3C,0xAB,0x9F,0xE9,0xB4,0xEA,0xB3,0xAC,0xAA,0x80,0x8A,0x3B,0x9F,0xBA,0xD8};

  TDelete() : row(), timestamp(0), deleteType((TDeleteType::type)1), writeToWal(true) {
    deleteType = (TDeleteType::type)1;

  }

  virtual ~TDelete() throw() {}

  std::string row;
  std::vector<TColumn>  columns;
  int64_t timestamp;
  TDeleteType::type deleteType;
  bool writeToWal;
  std::map<std::string, std::string>  attributes;

  _TDelete__isset __isset;

  void __set_row(const std::string& val) {
    row = val;
  }

  void __set_columns(const std::vector<TColumn> & val) {
    columns = val;
    __isset.columns = true;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
    __isset.timestamp = true;
  }

  void __set_deleteType(const TDeleteType::type val) {
    deleteType = val;
    __isset.deleteType = true;
  }

  void __set_writeToWal(const bool val) {
    writeToWal = val;
    __isset.writeToWal = true;
  }

  void __set_attributes(const std::map<std::string, std::string> & val) {
    attributes = val;
    __isset.attributes = true;
  }

  bool operator == (const TDelete & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (__isset.columns != rhs.__isset.columns)
      return false;
    else if (__isset.columns && !(columns == rhs.columns))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.deleteType != rhs.__isset.deleteType)
      return false;
    else if (__isset.deleteType && !(deleteType == rhs.deleteType))
      return false;
    if (__isset.writeToWal != rhs.__isset.writeToWal)
      return false;
    else if (__isset.writeToWal && !(writeToWal == rhs.writeToWal))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    return true;
  }
  bool operator != (const TDelete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDelete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TDelete &a, TDelete &b);

typedef struct _TIncrement__isset {
  _TIncrement__isset() : writeToWal(true) {}
  bool writeToWal;
} _TIncrement__isset;

class TIncrement {
 public:

  static const char* ascii_fingerprint; // = "7BA520E95B63B44DBF0A941BCB85069B";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0xA5,0x20,0xE9,0x5B,0x63,0xB4,0x4D,0xBF,0x0A,0x94,0x1B,0xCB,0x85,0x06,0x9B};

  TIncrement() : row(), writeToWal(true) {
  }

  virtual ~TIncrement() throw() {}

  std::string row;
  std::vector<TColumnIncrement>  columns;
  bool writeToWal;

  _TIncrement__isset __isset;

  void __set_row(const std::string& val) {
    row = val;
  }

  void __set_columns(const std::vector<TColumnIncrement> & val) {
    columns = val;
  }

  void __set_writeToWal(const bool val) {
    writeToWal = val;
    __isset.writeToWal = true;
  }

  bool operator == (const TIncrement & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(columns == rhs.columns))
      return false;
    if (__isset.writeToWal != rhs.__isset.writeToWal)
      return false;
    else if (__isset.writeToWal && !(writeToWal == rhs.writeToWal))
      return false;
    return true;
  }
  bool operator != (const TIncrement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIncrement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TIncrement &a, TIncrement &b);

typedef struct _TScan__isset {
  _TScan__isset() : startRow(false), stopRow(false), columns(false), caching(false), maxVersions(true), timeRange(false), filterString(false), batchSize(false), attributes(false) {}
  bool startRow;
  bool stopRow;
  bool columns;
  bool caching;
  bool maxVersions;
  bool timeRange;
  bool filterString;
  bool batchSize;
  bool attributes;
} _TScan__isset;

class TScan {
 public:

  static const char* ascii_fingerprint; // = "F8E1360E7E23E740DB30C3DEC918736C";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0xE1,0x36,0x0E,0x7E,0x23,0xE7,0x40,0xDB,0x30,0xC3,0xDE,0xC9,0x18,0x73,0x6C};

  TScan() : startRow(), stopRow(), caching(0), maxVersions(1), filterString(), batchSize(0) {
  }

  virtual ~TScan() throw() {}

  std::string startRow;
  std::string stopRow;
  std::vector<TColumn>  columns;
  int32_t caching;
  int32_t maxVersions;
  TTimeRange timeRange;
  std::string filterString;
  int32_t batchSize;
  std::map<std::string, std::string>  attributes;

  _TScan__isset __isset;

  void __set_startRow(const std::string& val) {
    startRow = val;
    __isset.startRow = true;
  }

  void __set_stopRow(const std::string& val) {
    stopRow = val;
    __isset.stopRow = true;
  }

  void __set_columns(const std::vector<TColumn> & val) {
    columns = val;
    __isset.columns = true;
  }

  void __set_caching(const int32_t val) {
    caching = val;
    __isset.caching = true;
  }

  void __set_maxVersions(const int32_t val) {
    maxVersions = val;
    __isset.maxVersions = true;
  }

  void __set_timeRange(const TTimeRange& val) {
    timeRange = val;
    __isset.timeRange = true;
  }

  void __set_filterString(const std::string& val) {
    filterString = val;
    __isset.filterString = true;
  }

  void __set_batchSize(const int32_t val) {
    batchSize = val;
    __isset.batchSize = true;
  }

  void __set_attributes(const std::map<std::string, std::string> & val) {
    attributes = val;
    __isset.attributes = true;
  }

  bool operator == (const TScan & rhs) const
  {
    if (__isset.startRow != rhs.__isset.startRow)
      return false;
    else if (__isset.startRow && !(startRow == rhs.startRow))
      return false;
    if (__isset.stopRow != rhs.__isset.stopRow)
      return false;
    else if (__isset.stopRow && !(stopRow == rhs.stopRow))
      return false;
    if (__isset.columns != rhs.__isset.columns)
      return false;
    else if (__isset.columns && !(columns == rhs.columns))
      return false;
    if (__isset.caching != rhs.__isset.caching)
      return false;
    else if (__isset.caching && !(caching == rhs.caching))
      return false;
    if (__isset.maxVersions != rhs.__isset.maxVersions)
      return false;
    else if (__isset.maxVersions && !(maxVersions == rhs.maxVersions))
      return false;
    if (__isset.timeRange != rhs.__isset.timeRange)
      return false;
    else if (__isset.timeRange && !(timeRange == rhs.timeRange))
      return false;
    if (__isset.filterString != rhs.__isset.filterString)
      return false;
    else if (__isset.filterString && !(filterString == rhs.filterString))
      return false;
    if (__isset.batchSize != rhs.__isset.batchSize)
      return false;
    else if (__isset.batchSize && !(batchSize == rhs.batchSize))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    return true;
  }
  bool operator != (const TScan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TScan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TScan &a, TScan &b);

typedef struct _TMutation__isset {
  _TMutation__isset() : put(false), deleteSingle(false) {}
  bool put;
  bool deleteSingle;
} _TMutation__isset;

class TMutation {
 public:

  static const char* ascii_fingerprint; // = "664520B216BC01A71AA57B370CC3097E";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0x45,0x20,0xB2,0x16,0xBC,0x01,0xA7,0x1A,0xA5,0x7B,0x37,0x0C,0xC3,0x09,0x7E};

  TMutation() {
  }

  virtual ~TMutation() throw() {}

  TPut put;
  TDelete deleteSingle;

  _TMutation__isset __isset;

  void __set_put(const TPut& val) {
    put = val;
    __isset.put = true;
  }

  void __set_deleteSingle(const TDelete& val) {
    deleteSingle = val;
    __isset.deleteSingle = true;
  }

  bool operator == (const TMutation & rhs) const
  {
    if (__isset.put != rhs.__isset.put)
      return false;
    else if (__isset.put && !(put == rhs.put))
      return false;
    if (__isset.deleteSingle != rhs.__isset.deleteSingle)
      return false;
    else if (__isset.deleteSingle && !(deleteSingle == rhs.deleteSingle))
      return false;
    return true;
  }
  bool operator != (const TMutation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMutation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TMutation &a, TMutation &b);


class TRowMutations {
 public:

  static const char* ascii_fingerprint; // = "910BFDE1ABC605DF3A86C76D9D439BD2";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x0B,0xFD,0xE1,0xAB,0xC6,0x05,0xDF,0x3A,0x86,0xC7,0x6D,0x9D,0x43,0x9B,0xD2};

  TRowMutations() : row() {
  }

  virtual ~TRowMutations() throw() {}

  std::string row;
  std::vector<TMutation>  mutations;

  void __set_row(const std::string& val) {
    row = val;
  }

  void __set_mutations(const std::vector<TMutation> & val) {
    mutations = val;
  }

  bool operator == (const TRowMutations & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(mutations == rhs.mutations))
      return false;
    return true;
  }
  bool operator != (const TRowMutations &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRowMutations & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TRowMutations &a, TRowMutations &b);

typedef struct _TIOError__isset {
  _TIOError__isset() : message(false) {}
  bool message;
} _TIOError__isset;

class TIOError : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  TIOError() : message() {
  }

  virtual ~TIOError() throw() {}

  std::string message;

  _TIOError__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
    __isset.message = true;
  }

  bool operator == (const TIOError & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TIOError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIOError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TIOError &a, TIOError &b);

typedef struct _TIllegalArgument__isset {
  _TIllegalArgument__isset() : message(false) {}
  bool message;
} _TIllegalArgument__isset;

class TIllegalArgument : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  TIllegalArgument() : message() {
  }

  virtual ~TIllegalArgument() throw() {}

  std::string message;

  _TIllegalArgument__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
    __isset.message = true;
  }

  bool operator == (const TIllegalArgument & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TIllegalArgument &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIllegalArgument & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TIllegalArgument &a, TIllegalArgument &b);

}}}} // namespace

#endif
